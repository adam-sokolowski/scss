@import "map";

// color functions
@function color-brightness($color-value) {
	@if (type-of($color-value) != color) {
		@return color-error($color-value);
	}

	@return (red($color-value) * .299 + green($color-value) * .587 + blue($color-value) * .114) / 255 * 100%;
}

@function is-dark-color($color-value) {
	@if (type-of($color-value) != color) {
		@return color-error($color-value);
	}

	$brightness: color-brightness($color-value);
	$red: red($color-value);
	$green: green($color-value);

	@if ($brightness > 79 or $green > 240 or ($red > 220 and $green > 180)) {
		@return false;
	}

	@return true;
}

@function color-inverse($color-value, $dark: #000, $light: #fff) {
	@if (type-of($color-value) != color) {
		@return color-error($color-value);
	}

	@if (is-dark-color($color-value)) {
		@return $light;
	}

	@return $dark;
}

@function color-error($color-value) {
	@error "The value `#{$color-value}` must be a color. If you are setting the value as a map make sure both the base and contrast are defined as colors. For example: $colors: ( primary: #327eff, secondary: (base: #32db64, contrast: #000));";
	@return false;
}

// fetch map color value
// @param {Map} $map - Map
// @param {String} $color-name - Color name to get
// @param {String} $color-key - Color key (optional), default base
// @return {Color}
@function color($map, $color-name, $color-key: base) {
	$color-value: map-get($map, $color-name);

	@if (type-of($color-value) == map) {
		$color-value: map-fetch($map, $color-name, $color-key);
	} @elseif ($color-key == contrast) {
		$color-value: color-inverse($color-value);
	}

	@return $color-value;
}

// get the color map key based on the value
// if it doesn't exist then return the value
@function color-key($colors, $value) {
	@each $color-name, $color-value in $colors {
		$base-value: color($colors, $color-name);

		@if ($base-value == $value) {
			@return map-get($colors, $color-name);
		}
	}

	@return $value;
}

// getch map color contrast
// @param {Map} $colors - colors map
// @param {String} $value - color value or color name
//
// Example values
// --------------------------------------------------
// primary | #327eff   | #444
// map key | map value | hex color not in map
// --------------------------------------------------
//
// @param {Boolean} $custom-contrast-mode - use custom
// contrast function
// @return {Color}
@function color-contrast($colors, $value, $custom-contrast-mode: null) {
	$color-value: null;

	// if the value is a color (e.g. #fff)
	// we need to call color-key to see if
	// it exists in the color map or not
	@if (type-of($value) == color) {
		$color-value: color-key($colors, $value);
		// If the value is a string (e.g. primary)
		// we want to get the value from the map
		// where it is the key
	} @else {
		$color-value: map-get($colors, $value);
	}

	// if the value is a map then get the contrast
	// from the map (e.g. (base: #327eff, contrast: blue))
	@if (type-of($color-value) == map) {
		// if the map has the contrast key then use that
		// otherwise it is a map with just a base so get
		// the inverse of that base color
		@if map-has-key($color-value, contrast) {
			$color-value: map-get($color-value, contrast);
		} @else {
			$color-value: color-inverse(map-get($color-value, base));
		}
		// if a mode was passed we need to call
		// the custom inverse function to get the inverse
		// color based on the mode
	} @elseif ($custom-contrast-mode) {
		// otherwise we were passed a color and can use the
		// function to get the inverse of that color
		// (e.g. #f4f4f4)
		$color-value: mode-inverse($color-value, $custom-contrast-mode);
	} @else {
		$color-value: color-inverse($color-value);
	}

	@if (type-of($color-value) != color) {
		@return color-error($color-value);
	}

	@return $color-value;
}

// create a list using the colors map
// @param {Map} $colors - colors map
// @return {List} $color-name, $color-base, $color-contrast
@function get-colors($colors, $custom-contrast-mode: null) {
	$colors-list: ();

	@each $color-name, $color-value in $colors {
		$color-base: null;
		$color-contrast: null;

		@if (type-of($color-value) == map) {
			$color-base: map-get($color-value, base);
			$color-contrast: map-get($color-value, contrast);
		} @else {
			$color-base: $color-value;
			$color-contrast: color-contrast($colors, $color-value, $custom-contrast-mode);
		}

		$colors-list: append($colors-list, ($color-name, $color-base, $color-contrast), comma);
	}

	@return $colors-list;
}